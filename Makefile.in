###
###	@configure_input@
###

.PHONY:		all targets examples install clean depend

.SUFFIXES:	.ml .mli .cmx .cmi .cmo .cmxa .cma .c .o

INSTALLDIR	= @INSTALLDIR@
INSTALL		= @INSTALL@
INSTALLDATA	= @INSTALL_DATA@

FINDLIB		= @OCAMLFIND@
OCBYTE		= @OCAMLC@
OCOPT		= @OCAMLOPT@

OC		= @OCAMLC@
CC		= @CC@

FLAGS		=
LIBS		=

CFLAGS		= @CFLAGS@ @DEFS@ -Wall
CAMLINCDIR	= -I@OCAMLLIB@

CURLHELPEROBJS	= curl-helper.o
CURLOBJS	= curl.cmx
CURLBCOBJS	= $(CURLOBJS:.cmx=.cmo)

CURLFLAGS	= -ccopt @CURLFLAGS@
CURLCLIBS	= -cclib -lcurl-helper -cclib "@CURLLIBS@"

ifeq (@OCAMLBEST@,opt)
TARGETS		= curl.cma curl.cmxa libcurl-helper.a dllcurl-helper.so
else
TARGETS		= curl.cma libcurl-helper.a dllcurl-helper.so
endif

all:
		@$(MAKE) depend
		@$(MAKE) targets

targets:	$(TARGETS) examples

examples:
		(cd examples; $(MAKE))

curl.cma:	$(CURLBCOBJS) dllcurl-helper.so
		ocamlmklib  -o curl $(CURLBCOBJS) -oc curl-helper @CURLLIBS@

curl.cmxa:	$(CURLOBJS) dllcurl-helper.so
		ocamlmklib  -o curl $(CURLOBJS) -oc curl-helper @CURLLIBS@

.ml.cmx:
		$(OCOPT) -c $(FLAGS) $< -o $@

.mli.cmi:
		$(OCBYTE) -c $(FLAGS) $< -o $@

.ml.cmo:
		$(OCBYTE) -c $(FLAGS) $< -o $@

libcurl-helper.a dllcurl-helper.so:	$(CURLHELPEROBJS)
		ocamlmklib  -oc curl-helper $(CURLHELPEROBJS) \
			@CURLLIBS@

.c.o:
		$(OC) -c -ccopt "$(CFLAGS)" $<

install:
ifeq ($(FINDLIB),ocamlfind)
		ocamlfind install -destdir $(DESTDIR) -ldconf ignore \
			curl META $(wildcard *.cmi) \
			 $(wildcard *.a) $(wildcard *.cma) \
			 $(wildcard *.cmxa) $(wildcard *.so) $(wildcard *.mli)
else
		mkdir -p $(INSTALLDIR)
		$(INSTALLDATA) curl.cma $(INSTALLDIR)
ifeq (@OCAMLBEST@,opt)
		$(INSTALLDATA) curl.cmxa $(INSTALLDIR)
endif
		$(INSTALLDATA) curl.mli curl.cmi $(INSTALLDIR)
		$(INSTALLDATA) curl.a libcurl-helper.a $(INSTALLDIR)
endif


clean:
		@rm -f $(TARGETS) *~ *.cm* *.o *.a *.so .depend core
		@(cd examples; $(MAKE) clean)

depend:
		@ocamldep *.mli *.ml > .depend

ifeq ($(wildcard .depend),.depend)
ifneq ($(MAKECMDGOALS),clean)
include .depend
endif
endif
